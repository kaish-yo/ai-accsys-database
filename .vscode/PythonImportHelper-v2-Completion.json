[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Depends",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "pyodbc",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pyodbc",
        "description": "pyodbc",
        "detail": "pyodbc",
        "documentation": {}
    },
    {
        "label": "urllib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "urllib",
        "description": "urllib",
        "detail": "urllib",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "auth",
        "importPath": "app.routers",
        "description": "app.routers",
        "isExtraImport": true,
        "detail": "app.routers",
        "documentation": {}
    },
    {
        "label": "query",
        "importPath": "app.routers",
        "description": "app.routers",
        "isExtraImport": true,
        "detail": "app.routers",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy.schema",
        "description": "sqlalchemy.schema",
        "isExtraImport": true,
        "detail": "sqlalchemy.schema",
        "documentation": {}
    },
    {
        "label": "BigInteger",
        "importPath": "sqlalchemy.types",
        "description": "sqlalchemy.types",
        "isExtraImport": true,
        "detail": "sqlalchemy.types",
        "documentation": {}
    },
    {
        "label": "Boolean",
        "importPath": "sqlalchemy.types",
        "description": "sqlalchemy.types",
        "isExtraImport": true,
        "detail": "sqlalchemy.types",
        "documentation": {}
    },
    {
        "label": "Date",
        "importPath": "sqlalchemy.types",
        "description": "sqlalchemy.types",
        "isExtraImport": true,
        "detail": "sqlalchemy.types",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy.types",
        "description": "sqlalchemy.types",
        "isExtraImport": true,
        "detail": "sqlalchemy.types",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy.types",
        "description": "sqlalchemy.types",
        "isExtraImport": true,
        "detail": "sqlalchemy.types",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy.types",
        "description": "sqlalchemy.types",
        "isExtraImport": true,
        "detail": "sqlalchemy.types",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy.types",
        "description": "sqlalchemy.types",
        "isExtraImport": true,
        "detail": "sqlalchemy.types",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "app.routers.query",
        "description": "app.routers.query",
        "peekOfCode": "router = APIRouter()\n# @router.post(\"/generate\")\n# def generate(message: Message):\n#     openai.api_key = os.getenv(\"OPENAI_API_KEY\")\n#     #initialize the promt\n#     messages = []\n#     for prompt in init_prompt:\n#         messages.append(prompt)\n#     # reflect the request\n#     messages.append({\"role\": \"user\", \"content\": message.message})",
        "detail": "app.routers.query",
        "documentation": {}
    },
    {
        "label": "server",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "server = os.getenv(\"SERVER_URI\")\ndatabase = os.getenv(\"DATABASE_NAME\")\nusername = os.getenv(\"DATABASE_USERNAME\")\npassword = os.getenv(\"DATABASE_PASSWORD\")\ndriver = pyodbc.drivers()[-1]\n# define the connection string to the SQL Server\nconnection_string = f'Driver={driver};Server=tcp:{server},1433;Database={database};Uid={username};Pwd={password};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;'\nconnection_string = connection_string.replace('\\r', '').replace('\\n', '') # for some reason some special charactors are added and causes errors without this line of code.\n# connctor engine \nodbc_connect = urllib.parse.quote_plus(connection_string)",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "database",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "database = os.getenv(\"DATABASE_NAME\")\nusername = os.getenv(\"DATABASE_USERNAME\")\npassword = os.getenv(\"DATABASE_PASSWORD\")\ndriver = pyodbc.drivers()[-1]\n# define the connection string to the SQL Server\nconnection_string = f'Driver={driver};Server=tcp:{server},1433;Database={database};Uid={username};Pwd={password};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;'\nconnection_string = connection_string.replace('\\r', '').replace('\\n', '') # for some reason some special charactors are added and causes errors without this line of code.\n# connctor engine \nodbc_connect = urllib.parse.quote_plus(connection_string)\nengine = create_engine('mssql+pyodbc:///?odbc_connect=' + odbc_connect)",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "username",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "username = os.getenv(\"DATABASE_USERNAME\")\npassword = os.getenv(\"DATABASE_PASSWORD\")\ndriver = pyodbc.drivers()[-1]\n# define the connection string to the SQL Server\nconnection_string = f'Driver={driver};Server=tcp:{server},1433;Database={database};Uid={username};Pwd={password};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;'\nconnection_string = connection_string.replace('\\r', '').replace('\\n', '') # for some reason some special charactors are added and causes errors without this line of code.\n# connctor engine \nodbc_connect = urllib.parse.quote_plus(connection_string)\nengine = create_engine('mssql+pyodbc:///?odbc_connect=' + odbc_connect)\n# create session which will be used in crud.py",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "password",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "password = os.getenv(\"DATABASE_PASSWORD\")\ndriver = pyodbc.drivers()[-1]\n# define the connection string to the SQL Server\nconnection_string = f'Driver={driver};Server=tcp:{server},1433;Database={database};Uid={username};Pwd={password};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;'\nconnection_string = connection_string.replace('\\r', '').replace('\\n', '') # for some reason some special charactors are added and causes errors without this line of code.\n# connctor engine \nodbc_connect = urllib.parse.quote_plus(connection_string)\nengine = create_engine('mssql+pyodbc:///?odbc_connect=' + odbc_connect)\n# create session which will be used in crud.py\nSessionLocal = sessionmaker(bind=engine)",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "driver",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "driver = pyodbc.drivers()[-1]\n# define the connection string to the SQL Server\nconnection_string = f'Driver={driver};Server=tcp:{server},1433;Database={database};Uid={username};Pwd={password};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;'\nconnection_string = connection_string.replace('\\r', '').replace('\\n', '') # for some reason some special charactors are added and causes errors without this line of code.\n# connctor engine \nodbc_connect = urllib.parse.quote_plus(connection_string)\nengine = create_engine('mssql+pyodbc:///?odbc_connect=' + odbc_connect)\n# create session which will be used in crud.py\nSessionLocal = sessionmaker(bind=engine)\n# Base class which will be used in model.py",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "connection_string",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "connection_string = f'Driver={driver};Server=tcp:{server},1433;Database={database};Uid={username};Pwd={password};Encrypt=yes;TrustServerCertificate=no;Connection Timeout=30;'\nconnection_string = connection_string.replace('\\r', '').replace('\\n', '') # for some reason some special charactors are added and causes errors without this line of code.\n# connctor engine \nodbc_connect = urllib.parse.quote_plus(connection_string)\nengine = create_engine('mssql+pyodbc:///?odbc_connect=' + odbc_connect)\n# create session which will be used in crud.py\nSessionLocal = sessionmaker(bind=engine)\n# Base class which will be used in model.py\nBase = declarative_base()\nif __name__ == '__main__':",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "connection_string",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "connection_string = connection_string.replace('\\r', '').replace('\\n', '') # for some reason some special charactors are added and causes errors without this line of code.\n# connctor engine \nodbc_connect = urllib.parse.quote_plus(connection_string)\nengine = create_engine('mssql+pyodbc:///?odbc_connect=' + odbc_connect)\n# create session which will be used in crud.py\nSessionLocal = sessionmaker(bind=engine)\n# Base class which will be used in model.py\nBase = declarative_base()\nif __name__ == '__main__':\n    # connection test",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "odbc_connect",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "odbc_connect = urllib.parse.quote_plus(connection_string)\nengine = create_engine('mssql+pyodbc:///?odbc_connect=' + odbc_connect)\n# create session which will be used in crud.py\nSessionLocal = sessionmaker(bind=engine)\n# Base class which will be used in model.py\nBase = declarative_base()\nif __name__ == '__main__':\n    # connection test\n    with engine.connect() as conn:\n        rs = conn.execute(text('SELECT @@VERSION as version'))",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "engine",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "engine = create_engine('mssql+pyodbc:///?odbc_connect=' + odbc_connect)\n# create session which will be used in crud.py\nSessionLocal = sessionmaker(bind=engine)\n# Base class which will be used in model.py\nBase = declarative_base()\nif __name__ == '__main__':\n    # connection test\n    with engine.connect() as conn:\n        rs = conn.execute(text('SELECT @@VERSION as version'))\n        for row in rs:",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "SessionLocal",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "SessionLocal = sessionmaker(bind=engine)\n# Base class which will be used in model.py\nBase = declarative_base()\nif __name__ == '__main__':\n    # connection test\n    with engine.connect() as conn:\n        rs = conn.execute(text('SELECT @@VERSION as version'))\n        for row in rs:\n            print(row)",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "app.database",
        "description": "app.database",
        "peekOfCode": "Base = declarative_base()\nif __name__ == '__main__':\n    # connection test\n    with engine.connect() as conn:\n        rs = conn.execute(text('SELECT @@VERSION as version'))\n        for row in rs:\n            print(row)",
        "detail": "app.database",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "app.main",
        "description": "app.main",
        "peekOfCode": "app = FastAPI()\n# app.include_router(auth.router)\napp.include_router(query.router)\n@app.get(\"/\")\nasync def root():\n    return {\"message\": \"Hello world!\"}",
        "detail": "app.main",
        "documentation": {}
    },
    {
        "label": "GeneralLedger",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class GeneralLedger(Base):\n    __tablename__ = GL_TABLE\n    record_id = Column(Integer, primary_key=True)\n    journal_id = Column(Integer, nullable=False)\n    account_id = Column(BigInteger, nullable=False)\n    account_name = Column(String(50), nullable=True)\n    subaccount_id = Column(BigInteger, nullable=False)\n    vat_id = Column(Integer, nullable=False)\n    debter_creditor = Column(String, nullable=False)\n    amount = Column(Float(), nullable=False)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class User(Base):\n    __tablename__ = USER_TABLE\n    user_id = Column(BigInteger, primary_key=True)\n    user_name = Column(String(50), nullable=False)\n    title = Column(String(50), nullable=False)\n    last_title = Column(String(50), nullable=True)\n    join_date = Column(Date, nullable=False)\n    def to_dict(self):\n        return {\n            'user_id': self.user_id,",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Account",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Account(Base):\n    __tablename__ = ACC_TABLE\n    account_id = Column(BigInteger, primary_key=True)\n    account_name = Column(String(50), nullable=False)    \n    def to_dict(self):\n        return {\n            'account_id': self.account_id,\n            'account_name': self.account_name\n        }\nclass Vat(Base):",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "Vat",
        "kind": 6,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "class Vat(Base):\n    __tablename__ = VAT_TABLE\n    vat_id = Column(Integer, primary_key=True)\n    vat_category = Column(String(50))\n    def to_dict(self):\n        return {\n            'vat_id': self.vat_id,\n            'vat_category': self.vat_category\n        }",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "GL_TABLE",
        "kind": 5,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "GL_TABLE = 'general_ledger'\nUSER_TABLE = 'users'\nACC_TABLE = 'account_master'\nVAT_TABLE = 'vat_master' # almost static\nclass GeneralLedger(Base):\n    __tablename__ = GL_TABLE\n    record_id = Column(Integer, primary_key=True)\n    journal_id = Column(Integer, nullable=False)\n    account_id = Column(BigInteger, nullable=False)\n    account_name = Column(String(50), nullable=True)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "USER_TABLE",
        "kind": 5,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "USER_TABLE = 'users'\nACC_TABLE = 'account_master'\nVAT_TABLE = 'vat_master' # almost static\nclass GeneralLedger(Base):\n    __tablename__ = GL_TABLE\n    record_id = Column(Integer, primary_key=True)\n    journal_id = Column(Integer, nullable=False)\n    account_id = Column(BigInteger, nullable=False)\n    account_name = Column(String(50), nullable=True)\n    subaccount_id = Column(BigInteger, nullable=False)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "ACC_TABLE",
        "kind": 5,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "ACC_TABLE = 'account_master'\nVAT_TABLE = 'vat_master' # almost static\nclass GeneralLedger(Base):\n    __tablename__ = GL_TABLE\n    record_id = Column(Integer, primary_key=True)\n    journal_id = Column(Integer, nullable=False)\n    account_id = Column(BigInteger, nullable=False)\n    account_name = Column(String(50), nullable=True)\n    subaccount_id = Column(BigInteger, nullable=False)\n    vat_id = Column(Integer, nullable=False)",
        "detail": "app.models",
        "documentation": {}
    },
    {
        "label": "VAT_TABLE",
        "kind": 5,
        "importPath": "app.models",
        "description": "app.models",
        "peekOfCode": "VAT_TABLE = 'vat_master' # almost static\nclass GeneralLedger(Base):\n    __tablename__ = GL_TABLE\n    record_id = Column(Integer, primary_key=True)\n    journal_id = Column(Integer, nullable=False)\n    account_id = Column(BigInteger, nullable=False)\n    account_name = Column(String(50), nullable=True)\n    subaccount_id = Column(BigInteger, nullable=False)\n    vat_id = Column(Integer, nullable=False)\n    debter_creditor = Column(String, nullable=False)",
        "detail": "app.models",
        "documentation": {}
    }
]